package enumerable

func TakeWhile(type TSource)(source IEnumerable(TSource), predicate func(TSource) bool) IEnumerable(TSource) {
	return takeWhileEnumerable(TSource){source, predicate}
}

type takeWhileEnumerable(type TSource) struct {
	source    IEnumerable(TSource)
	predicate func(TSource) bool
}

func (t takeWhileEnumerable(TSource)) Enumerator() IEnumerator(TSource) {
	return &takeWhileEnumerator(TSource){enumerator: t.source.Enumerator(), predicate: t.predicate}
}

type takeWhileEnumerator(type TSource) struct {
	enumerator IEnumerator(TSource)
	predicate  func(TSource) bool
}

func (t *takeWhileEnumerator(TSource)) Current() TSource {
	return t.enumerator.Current()
}

func (t *takeWhileEnumerator(TSource)) MoveNext() bool {
	ok := t.enumerator.MoveNext()
	if !ok {
		return false
	}
	return t.predicate(t.enumerator.Current())
}
