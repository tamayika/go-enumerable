package enumerable

func Where(type TSource)(source IEnumerable(TSource), predicate func(TSource) bool) IEnumerable(TSource) {
	return whereEnumerable(TSource){source, predicate}
}

type whereEnumerable(type TSource) struct {
	source IEnumerable(TSource)
	cb     func(TSource) bool
}

func (w whereEnumerable(TSource)) Enumerator() IEnumerator(TSource) {
	return &whereEnumerator(TSource){enumerator: w.source.Enumerator(), cb: w.cb}
}

type whereEnumerator(type TSource) struct {
	enumerator IEnumerator(TSource)
	cb         func(TSource) bool
}

func (w *whereEnumerator(TSource)) Current() TSource {
	return w.enumerator.Current()
}

func (w *whereEnumerator(TSource)) MoveNext() bool {
	for w.enumerator.MoveNext() {
		if w.cb(w.enumerator.Current()) {
			return true
		}
	}
	return false
}
